# Generated by Django 4.2.7 on 2025-06-18 12:07

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0004_fix_source_sentences_field"),
    ]

    operations = [
        migrations.CreateModel(
            name="GeminiProcessedTask",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "task_item",
                    models.CharField(
                        help_text="At least 10 natural, coherent words describing the task",
                        max_length=1000,
                    ),
                ),
                (
                    "assignee_emails",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated email addresses of assignees",
                        max_length=500,
                    ),
                ),
                (
                    "assignee_full_names",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated full names of assignees",
                        max_length=500,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("High", "High"),
                            ("Medium", "Medium"),
                            ("Low", "Low"),
                        ],
                        default="Medium",
                        help_text="Task priority as determined by Gemini extraction logic",
                        max_length=10,
                    ),
                ),
                (
                    "brief_description",
                    models.TextField(
                        help_text="30-50 words, human tone, begins with '<Assigner Full Name> asked <Assignee First Name>...'"
                    ),
                ),
                (
                    "due_date_ms",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Due date as UTC milliseconds timestamp, or null if no date specified",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("To Do", "To Do"),
                            ("Stuck", "Stuck"),
                            ("Working on it", "Working on it"),
                            ("Waiting for review", "Waiting for review"),
                            ("Approved", "Approved"),
                            ("Done", "Done"),
                        ],
                        default="To Do",
                        help_text="Task status as determined by Gemini extraction logic",
                        max_length=20,
                    ),
                ),
                ("gemini_model_version", models.CharField(blank=True, max_length=100)),
                ("processing_timestamp", models.DateTimeField(auto_now_add=True)),
                ("extraction_confidence", models.FloatField(default=0.0)),
                (
                    "raw_gemini_response",
                    models.JSONField(
                        default=dict,
                        help_text="Complete raw response from Gemini API for debugging",
                    ),
                ),
                (
                    "source_sentences",
                    models.JSONField(
                        default=list,
                        help_text="Original transcript sentences that led to this task extraction",
                    ),
                ),
                (
                    "extraction_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which this task appeared in the Gemini response array",
                    ),
                ),
                (
                    "meets_word_count_requirement",
                    models.BooleanField(
                        default=False,
                        help_text="True if task_item has at least 10 words",
                    ),
                ),
                (
                    "meets_description_requirement",
                    models.BooleanField(
                        default=False,
                        help_text="True if brief_description is 30-50 words",
                    ),
                ),
                ("monday_item_id", models.CharField(blank=True, max_length=100)),
                ("delivered_to_monday", models.BooleanField(default=False)),
                ("delivery_timestamp", models.DateTimeField(blank=True, null=True)),
                ("delivery_errors", models.JSONField(default=list)),
            ],
            options={
                "db_table": "core_gemini_processed_tasks",
                "ordering": ["raw_transcript", "extraction_order"],
            },
        ),
        migrations.RemoveIndex(
            model_name="rawtranscriptcache",
            name="core_raw_tr_meeting_bd6fec_idx",
        ),
        migrations.AlterField(
            model_name="actionitem",
            name="monday_item_id",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddIndex(
            model_name="rawtranscriptcache",
            index=models.Index(
                fields=["meeting_date"], name="core_raw_tr_meeting_4aac11_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawtranscriptcache",
            index=models.Index(
                fields=["processed"], name="core_raw_tr_process_846a5d_idx"
            ),
        ),
        migrations.AddField(
            model_name="geminiprocessedtask",
            name="raw_transcript",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="gemini_processed_tasks",
                to="core.rawtranscriptcache",
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["raw_transcript"], name="core_gemini_raw_tra_dc0083_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["priority"], name="core_gemini_priorit_b32fbd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(fields=["status"], name="core_gemini_status_97c365_idx"),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["due_date_ms"], name="core_gemini_due_dat_90a920_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["processing_timestamp"], name="core_gemini_process_0883e1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["extraction_order"], name="core_gemini_extract_57a016_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="geminiprocessedtask",
            index=models.Index(
                fields=["delivered_to_monday"], name="core_gemini_deliver_471855_idx"
            ),
        ),
    ]
